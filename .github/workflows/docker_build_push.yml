name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  push:
    branches:
      - '**'
    tags:
      - 'v*.*.*'

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  IMAGE_NAME: ${{ github.repository }}

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      #
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry using the account and
      # password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          username: ${{ secrets.DOCKER_HUB_USER }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: What branch is this?
        run: echo "BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and
      # labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be
      # referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      #      - name: Extract metadata (tags, labels) for Docker
      #        id: meta
      #        uses: docker/metadata-action@v5
      #        with:
      #          # list of Docker images to use as base name for tags
      #          images: |
      #            name/app
      #          # generate Docker tags based on the following events/attributes
      #          tags: |
      #            type=schedule
      #            type=ref,event=branch
      #            type=ref,event=pr
      #            type=semver,pattern={{version}}
      #            type=semver,pattern={{major}}.{{minor}}
      #            type=semver,pattern={{major}}
      #            type=sha

      - name: Set REF_NAME variable
        run: |
          REF=${{ github.ref }}
          if [[ "$REF" =~ ^refs/tags/ ]]; then
          echo "REF_NAME=${REF#refs/tags/}" >> $GITHUB_ENV
          else
          echo "REF_NAME=${REF#refs/heads/}" >> $GITHUB_ENV
          fi

      # This step uses the `docker/build-push-action` action to build the image, based on your
      # repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image for API
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: docker/deployments/api.dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
